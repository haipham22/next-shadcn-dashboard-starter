// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "./generated"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  password        String    @db.VarChar(100)
  rememberToken   String?   @map("remember_token") @db.VarChar(100)
  name            String    @db.VarChar(100)
  lastSignInAt    DateTime? @map("last_sign_in_at")
  status          String    @default("active") @db.VarChar(20)
  emailVerifiedAt DateTime? @map("email_verified_at")
  avatar          String?   @db.Text
  invitedByUserId String?   @map("invited_by_user_id")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  Account         Account[]
  Session         Session[]

  @@map("users")
}

model VerificationToken {
  identifier String   @db.VarChar(100)
  token      String   @unique @map("token") @db.VarChar(100)
  expiresAt  DateTime @map("expires_at")
  type       String   @map("type") @db.VarChar(20)

  @@id([identifier, token, type])
  @@map("verification_tokens")
}

model Account {
  userId            String  @map("user_id")
  type              String  @db.VarChar(20)
  provider          String  @db.VarChar(50)
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @map("refresh_token") @db.Text
  access_token      String? @map("access_token") @db.Text
  expires_at        Int?    @map("expires_at")
  token_type        String? @map("token_type") @db.VarChar(50)
  scope             String? @db.Text
  id_token          String? @map("id_token") @db.Text
  session_state     String? @map("session_state") @db.VarChar(50)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime @map("expires")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("sessions")
}
